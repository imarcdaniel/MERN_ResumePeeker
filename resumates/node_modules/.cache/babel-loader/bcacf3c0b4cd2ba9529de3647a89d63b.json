{"ast":null,"code":"// import { Component } from 'react';\n// export default class SignUpForm extends Component {\n//   state = {\n//     email: '',\n//     password: '',\n//     error: ''\n//   };\n//   handleChange = (evt) => {\n//     this.setState({\n//       [evt.target.name]: evt.target.value,\n//       error: ''\n//     });\n//   };\n//   handleSubmit = async (evt) => {\n//     evt.preventDefault();\n//     try {\n//       // 1. POST our new user info to the server\n//       const fetchResponse = await fetch('/api/users/login', {\n//         method: 'POST',\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ email: this.state.email, password: this.state.password, })\n//       })\n//       // 2. Check \"fetchResponse.ok\". False means status code was 4xx from the server/controller action\n//       if (!fetchResponse.ok) throw new Error('Fetch failed - Bad request')\n//       let token = await fetchResponse.json() // 3. decode fetch response: get jwt token from srv\n//       localStorage.setItem('token', token);  // 4. Stick token into localStorage\n//       const userDoc = JSON.parse(atob(token.split('.')[1])).user; // 5. Decode the token + put user document into state\n//       this.props.setUserInState(userDoc)\n//     } catch (err) {\n//       console.log(\"SignupForm error\", err)\n//       this.setState({ error: 'Sign Up Failed - Try Again' });\n//     }\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <div className=\"form-container\" onSubmit={this.handleSubmit}>\n//           <form autoComplete=\"off\" >\n//             <label>Email</label>\n//             <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} required />\n//             <label>Password</label>\n//             <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} required />\n//             <button type=\"submit\">LOG IN</button>\n//           </form>\n//         </div>\n//         <p className=\"error-message\">&nbsp;{this.state.error}</p>\n//       </div>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/home/ericmbc/GA/resumates/MERN_ResumePeeker/resumates/src/components/LoginForm/LoginForm.jsx"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { Component } from 'react';\n\n// export default class SignUpForm extends Component {\n//   state = {\n//     email: '',\n//     password: '',\n//     error: ''\n//   };\n\n//   handleChange = (evt) => {\n//     this.setState({\n//       [evt.target.name]: evt.target.value,\n//       error: ''\n//     });\n//   };\n\n//   handleSubmit = async (evt) => {\n//     evt.preventDefault();\n//     try {\n\n//       // 1. POST our new user info to the server\n//       const fetchResponse = await fetch('/api/users/login', {\n//         method: 'POST',\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ email: this.state.email, password: this.state.password, })\n//       })\n\n//       // 2. Check \"fetchResponse.ok\". False means status code was 4xx from the server/controller action\n//       if (!fetchResponse.ok) throw new Error('Fetch failed - Bad request')\n\n//       let token = await fetchResponse.json() // 3. decode fetch response: get jwt token from srv\n//       localStorage.setItem('token', token);  // 4. Stick token into localStorage\n\n//       const userDoc = JSON.parse(atob(token.split('.')[1])).user; // 5. Decode the token + put user document into state\n//       this.props.setUserInState(userDoc)\n\n//     } catch (err) {\n//       console.log(\"SignupForm error\", err)\n//       this.setState({ error: 'Sign Up Failed - Try Again' });\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <div className=\"form-container\" onSubmit={this.handleSubmit}>\n//           <form autoComplete=\"off\" >\n//             <label>Email</label>\n//             <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} required />\n//             <label>Password</label>\n//             <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} required />\n//             <button type=\"submit\">LOG IN</button>\n//           </form>\n//         </div>\n//         <p className=\"error-message\">&nbsp;{this.state.error}</p>\n//       </div>\n//     );\n//   }\n// }"]},"metadata":{},"sourceType":"module"}