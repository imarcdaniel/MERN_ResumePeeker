{"ast":null,"code":"var _jsxFileName = \"/home/ericmbc/GA/resumates/MERN_ResumePeeker/resumates/src/pages/NewOrderPage/NewOrderPage.jsx\";\nimport \"./NewOrderPage.css\";\nimport React from 'react';\nimport { Link } from 'react-router-dom'; // import MenuList from '../../components/MenuList/MenuList';\n\nimport OrderDetail from '../../components/OrderDetail/OrderDetail'; // import Logo from '../../components/Logo/Logo';\n// import CategoryList from '../../components/CategoryList/CategoryList';\n\nimport UserLogOut from '../../components/UserLogOut/UserLogOut';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewOrderPage extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      menuCategories: [],\n      activeCategory: \"\",\n      lineItems: [],\n      menuItems: []\n    };\n\n    this.handleAddToCart = incoming_item => {\n      let itemAlreadyExistsInCart = this.state.lineItems.some(obj => obj.item.name === incoming_item.name);\n\n      if (itemAlreadyExistsInCart) {\n        // if item already exists in cart, increment quantity in the fanciest way possible: map + ternary operator to replace the object in question.\n        // YOU DO: replace with a simple, readable, debuggable for loop.\n        this.setState({\n          lineItems: this.state.lineItems.map(obj => obj.item.name === incoming_item.name ? { ...obj,\n            qty: obj.qty + 1\n          } : obj)\n        });\n      } else {\n        // if item doesn't exist in cart, copy over existing cart + stick incoming_item in\n        this.setState({\n          lineItems: [...this.state.lineItems, {\n            qty: 1,\n            item: incoming_item\n          }]\n        });\n      }\n    };\n\n    this.handleCheckout = async () => {\n      try {\n        let jwt = localStorage.getItem('token');\n        let fetchResponse = await fetch(\"/api/orders\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            'Authorization': 'Bearer ' + jwt\n          },\n          body: JSON.stringify({\n            lineItems: this.state.lineItems\n          }) // <-- send this object to server\n\n        });\n        let serverResponse = await fetchResponse.json(); // <-- decode fetch response\n\n        console.log(\"Success:\", serverResponse); // <-- log server response\n\n        this.setState({\n          lineItems: []\n        }); // if order sent without errors, set state to empty\n      } catch (err) {\n        console.error(\"Error:\", err); // <-- log if error \n      }\n    };\n  }\n\n  // lifecycle method that runs once. fetch the menu from the DB.\n  async componentDidMount() {\n    try {\n      let fetchItemsResponse = await fetch('/api/items'); // <-- get data from server (Stream object)\n\n      let fetchCatsResponse = await fetch('/api/categories');\n      let items = await fetchItemsResponse.json(); // <------- convert fetch response into a js object/array\n\n      let catsObjects = await fetchCatsResponse.json();\n      let catsStrings = catsObjects.map(c => c.name); // convert [{\"id\":\"0\", name:\"sandwiches\"},{..] => [\"sandwiches\",..]\n\n      this.setState({\n        menuItems: items,\n        menuCategories: catsStrings\n      });\n    } catch (err) {\n      console.error('ERROR:', err); // <-- log if error\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"NewOrderPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"nav\",\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CategoryList, {\n          menuCategories: this.state.menuCategories\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/orders\",\n          className: \"button btn-sm\",\n          children: \"PREVIOUS ORDERS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UserLogOut, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuList, {\n        menuItems: this.state.menuItems,\n        handleAddToCart: this.handleAddToCart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrderDetail, {\n        handleCheckout: this.handleCheckout,\n        lineItems: this.state.lineItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NewOrderPage;","map":{"version":3,"sources":["/home/ericmbc/GA/resumates/MERN_ResumePeeker/resumates/src/pages/NewOrderPage/NewOrderPage.jsx"],"names":["React","Link","OrderDetail","UserLogOut","NewOrderPage","Component","state","menuCategories","activeCategory","lineItems","menuItems","handleAddToCart","incoming_item","itemAlreadyExistsInCart","some","obj","item","name","setState","map","qty","handleCheckout","jwt","localStorage","getItem","fetchResponse","fetch","method","headers","body","JSON","stringify","serverResponse","json","console","log","err","error","componentDidMount","fetchItemsResponse","fetchCatsResponse","items","catsObjects","catsStrings","c","render"],"mappings":"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","sourcesContent":["import \"./NewOrderPage.css\"\nimport React from 'react'\nimport { Link } from 'react-router-dom';\n// import MenuList from '../../components/MenuList/MenuList';\nimport OrderDetail from '../../components/OrderDetail/OrderDetail';\n// import Logo from '../../components/Logo/Logo';\n// import CategoryList from '../../components/CategoryList/CategoryList';\nimport UserLogOut from '../../components/UserLogOut/UserLogOut';\n\nclass NewOrderPage extends React.Component {\n\n  // initial state of the app when it first loads\n  state = {\n    menuCategories: [],\n    activeCategory: \"\",\n    lineItems: [],\n    menuItems: [],\n  }\n\n  // add to cart button\n  handleAddToCart = (incoming_item) => {    \n    let itemAlreadyExistsInCart = this.state.lineItems.some(obj => obj.item.name === incoming_item.name)\n    if (itemAlreadyExistsInCart) {\n      // if item already exists in cart, increment quantity in the fanciest way possible: map + ternary operator to replace the object in question.\n      // YOU DO: replace with a simple, readable, debuggable for loop.\n      this.setState({lineItems: this.state.lineItems.map(obj => obj.item.name === incoming_item.name ? {...obj,qty:obj.qty+1} : obj)})\n    } else {\n      // if item doesn't exist in cart, copy over existing cart + stick incoming_item in\n      this.setState({lineItems: [...this.state.lineItems,{qty:1,item:incoming_item}]})\n    }\n  }\n\n  // send cart to server\n  handleCheckout = async () => {\n    try {\n\n      let jwt = localStorage.getItem('token')\n\n\n      let fetchResponse = await fetch(\"/api/orders\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': 'Bearer ' + jwt\n        },\n        body: JSON.stringify({lineItems: this.state.lineItems}) // <-- send this object to server\n        }) \n      let serverResponse = await fetchResponse.json() // <-- decode fetch response\n      console.log(\"Success:\", serverResponse)   // <-- log server response\n\n      this.setState({lineItems: []}) // if order sent without errors, set state to empty\n    } catch (err) {\n      console.error(\"Error:\", err) // <-- log if error \n    }\n  }\n\n  // lifecycle method that runs once. fetch the menu from the DB.\n  async componentDidMount() {\n    try {\n      let fetchItemsResponse = await fetch('/api/items') // <-- get data from server (Stream object)\n      let fetchCatsResponse = await fetch('/api/categories')\n      let items = await fetchItemsResponse.json(); // <------- convert fetch response into a js object/array\n      let catsObjects = await fetchCatsResponse.json();\n      let catsStrings = catsObjects.map(c => c.name) // convert [{\"id\":\"0\", name:\"sandwiches\"},{..] => [\"sandwiches\",..]\n      this.setState({ menuItems: items, menuCategories: catsStrings})\n    } catch (err) {\n      console.error('ERROR:', err) // <-- log if error\n    }\n  }\n  \n  render() {\n    return (\n      <main className=\"NewOrderPage\">\n        <nav className=\"nav\">\n          <Logo />\n          <CategoryList menuCategories={this.state.menuCategories} />\n          <Link to=\"/orders\" className=\"button btn-sm\">PREVIOUS ORDERS</Link>\n          <UserLogOut />\n        </nav>\n        <MenuList menuItems={this.state.menuItems} handleAddToCart={this.handleAddToCart} />\n        <OrderDetail handleCheckout={this.handleCheckout} lineItems={this.state.lineItems} />\n      </main>\n    );\n  }\n}\n\nexport default NewOrderPage;"]},"metadata":{},"sourceType":"module"}