{"ast":null,"code":"var _jsxFileName = \"/home/ericmbc/GA/resumates/MERN_ResumePeeker/resumates/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css'; // Add the Route named import\n\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\nimport AuthPage from './pages/AuthPage/AuthPage';\nimport IndexPage from './pages/IndexPage/IndexPage';\nimport Navbar from './components/Navbar/Navbar';\nimport UploadForm from './components/UploadForm/UploadForm';\nimport Resume from './components/Resume/Resume';\nimport UploadPage from './pages/UploadPage/UploadPage';\nimport ProfilePage from './pages/ProfilePage/ProfilePage';\nimport LandingPage from './pages/LandingPage/LandingPage';\nimport FileUpload from \"./components/FileUpload/FileUpload\";\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      user: null,\n      resumes: []\n    };\n\n    this.getResumes = async () => {\n      await fetch(\"/api/resumes\").then(res => res.json()).then(data => this.setState({\n        resumes: data\n      }));\n    };\n\n    this.setUserInState = incomingUserData => {\n      this.setState({\n        user: incomingUserData\n      });\n    };\n\n    this.handleLogout = () => {\n      this.setState({\n        user: null\n      });\n      localStorage.removeItem('token');\n    };\n  }\n\n  componentDidMount() {\n    this.getPosts();\n  }\n\n  componentDidMount() {\n    let token = localStorage.getItem('token');\n\n    if (token) {\n      const payload = JSON.parse(atob(token.split('.')[1])); // decode token\n\n      if (payload.exp < Date.now() / 1000) {\n        // Check if our token is expired, and remove if it is (standard/boilerplate)\n        localStorage.removeItem('token');\n        token = null;\n      } else {\n        // token not expired! our user is still 'logged in'. Put them into state.\n        let userDoc = payload.user; // grab user details from token\n\n        this.setState({\n          user: userDoc\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"main\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      handleLogout: this.handleLogout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(FileUpload, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }), this.state.user ? /*#__PURE__*/React.createElement(Routes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/index\",\n      element: /*#__PURE__*/React.createElement(IndexPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 43\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/LandingPage\",\n      element: /*#__PURE__*/React.createElement(LandingPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 49\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/Upload\",\n      element: /*#__PURE__*/React.createElement(UploadPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 44\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/Profile\",\n      element: /*#__PURE__*/React.createElement(ProfilePage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 45\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Navigate, {\n      to: \"/index\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(AuthPage, {\n      setUserInState: this.setUserInState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ericmbc/GA/resumates/MERN_ResumePeeker/resumates/src/App.js"],"names":["React","Component","BrowserRouter","Routes","Route","Navigate","AuthPage","IndexPage","Navbar","UploadForm","Resume","UploadPage","ProfilePage","LandingPage","FileUpload","Link","App","state","user","resumes","getResumes","fetch","then","res","json","data","setState","setUserInState","incomingUserData","handleLogout","localStorage","removeItem","componentDidMount","getPosts","token","getItem","payload","JSON","parse","atob","split","exp","Date","now","userDoc","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n// Add the Route named import\nimport {BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\nimport AuthPage from './pages/AuthPage/AuthPage'\nimport IndexPage from './pages/IndexPage/IndexPage';\nimport Navbar from './components/Navbar/Navbar';\nimport UploadForm from './components/UploadForm/UploadForm';\nimport Resume from './components/Resume/Resume';\nimport UploadPage from './pages/UploadPage/UploadPage';\nimport ProfilePage from './pages/ProfilePage/ProfilePage';\nimport LandingPage from './pages/LandingPage/LandingPage';\nimport FileUpload from \"./components/FileUpload/FileUpload\";\nimport { Link } from 'react-router-dom'\n\nclass App extends Component {\n  state = {\n    user: null,\n    resumes: []\n  }\n\n  getResumes = async () => {\n    await fetch(\"/api/resumes\").then((res) => res.json()).then(data => this.setState({resumes: data}))\n  }\n\n  // a method to update user\n  setUserInState = (incomingUserData) => {\n    this.setState({ user: incomingUserData})\n  }\n\n  handleLogout = () => {\n    this.setState({ user: null })\n    localStorage.removeItem('token');\n  }\n\n  componentDidMount() {\n      this.getPosts()\n}\n\n  componentDidMount() {\n    \n    let token = localStorage.getItem('token')\n    if (token) {\n      const payload = JSON.parse(atob(token.split('.')[1])); // decode token\n      if (payload.exp < Date.now() / 1000) {  // Check if our token is expired, and remove if it is (standard/boilerplate)\n        localStorage.removeItem('token');\n        token = null;\n      } else { // token not expired! our user is still 'logged in'. Put them into state.\n        let userDoc = payload.user // grab user details from token\n        this.setState({user: userDoc})      \n      }\n    }\n  }\n\n  render() {\n    return (\n      <main className=\"App\">\n        <Navbar handleLogout={this.handleLogout}/>\n        <FileUpload />\n        {/* this ternary operator asks: is there a user in state? */}\n        {/* if yes, they can see our pages: neworder, etc. */}\n        {/* if no(user is null), show them only the <AuthPage> */}\n        {this.state.user ? (\n          <Routes>\n            <Route path=\"/index\" element={<IndexPage />} />\n            <Route path=\"/LandingPage\" element={<LandingPage />} />\n            <Route path=\"/Upload\" element={<UploadPage />} />\n            <Route path=\"/Profile\" element={<ProfilePage />} />\n            <Navigate to=\"/index\" />\n          </Routes>\n        ) : (\n          <AuthPage setUserInState={this.setUserInState} />\n        )}\n      </main>\n    );\n\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}