{"ast":null,"code":"var _jsxFileName = \"/home/ericmbc/GA/resumates/MERN_ResumePeeker/resumates/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      user: null\n    };\n\n    this.setUserInState = incomingUserData => {\n      this.setState({\n        user: incomingUserData\n      });\n    };\n  }\n\n  componentDidMount() {\n    let token = localStorage.getItem('token');\n\n    if (token) {\n      const payload = JSON.parse(atob(token.split('.')[1])); // decode token\n\n      if (payload.exp < Date.now() / 1000) {\n        // Check if our token is expired, and remove if it is (standard/boilerplate)\n        localStorage.removeItem('token');\n        token = null;\n      } else {\n        let userDoc = payload.user; // grab user details from token\n\n        this.setState({\n          user: userDoc\n        });\n      }\n    }\n  } // a method to update user\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App\",\n      children: this.state.user ? /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/index\",\n          render: props => /*#__PURE__*/_jsxDEV(IndexPage, { ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(AuthPage, {\n        setUserInState: this.setUserInState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ericmbc/GA/resumates/MERN_ResumePeeker/resumates/src/App.js"],"names":["App","Component","state","user","setUserInState","incomingUserData","setState","componentDidMount","token","localStorage","getItem","payload","JSON","parse","atob","split","exp","Date","now","removeItem","userDoc","render","props"],"mappings":";;AACA,OAAO,WAAP;;;AAEA,MAAMA,GAAN,SAAkBC,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BC,KAF0B,GAElB;AACNC,MAAAA,IAAI,EAAE;AADA,KAFkB;;AAAA,SAqB1BC,cArB0B,GAqBRC,gBAAD,IAAsB;AACrC,WAAKC,QAAL,CAAc;AAAEH,QAAAA,IAAI,EAAEE;AAAR,OAAd;AACD,KAvByB;AAAA;;AAM1BE,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;AACA,QAAIF,KAAJ,EAAW;AACT,YAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,CAAhB,CADS,CAC8C;;AACvD,UAAIJ,OAAO,CAACK,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AAAG;AACtCT,QAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB;AACAX,QAAAA,KAAK,GAAG,IAAR;AACD,OAHD,MAGO;AACL,YAAIY,OAAO,GAAGT,OAAO,CAACR,IAAtB,CADK,CACsB;;AAC3B,aAAKG,QAAL,CAAc;AAACH,UAAAA,IAAI,EAAEiB;AAAP,SAAd;AACD;AACF;AACF,GAlByB,CAoB1B;;;AAKAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAM,MAAA,SAAS,EAAC,KAAhB;AAAA,gBACI,KAAKnB,KAAL,CAAWC,IAAX,gBACA,QAAC,MAAD;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,MAAM,EAAGmB,KAAD,iBAC3B,QAAC,SAAD,OAAeA;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADA,gBAOA,QAAC,QAAD;AAAU,QAAA,cAAc,EAAE,KAAKlB;AAA/B;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AA3CyB;;AA8C5B,eAAeJ,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    let token = localStorage.getItem('token')\n    if (token) {\n      const payload = JSON.parse(atob(token.split('.')[1])); // decode token\n      if (payload.exp < Date.now() / 1000) {  // Check if our token is expired, and remove if it is (standard/boilerplate)\n        localStorage.removeItem('token');\n        token = null;\n      } else {\n        let userDoc = payload.user // grab user details from token\n        this.setState({user: userDoc})\n      }\n    }\n  }\n\n  // a method to update user\n  setUserInState = (incomingUserData) => {\n    this.setState({ user: incomingUserData})\n  }\n\n  render() {\n    return (\n      <main className=\"App\">\n        { this.state.user ? \n          <Switch>\n            <Route path='/index' render={(props) => (\n              <IndexPage {...props}/>\n            )}/>\n          </Switch>\n          :\n          <AuthPage setUserInState={this.setUserInState}/>\n        }\n      </main>\n    );\n\n\n\n    \n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}