{"ast":null,"code":"// // import \"./NewOrderPage.css\"\n// import React from 'react'\n// import { Link } from 'react-router-dom';\n// // import MenuList from '../../components/MenuList/MenuList';\n// // import OrderDetail from '../../components/OrderDetail/OrderDetail';\n// // import Logo from '../../components/Logo/Logo';\n// // import CategoryList from '../../components/CategoryList/CategoryList';\n// // import UserLogOut from '../../components/UserLogOut/UserLogOut';\n// class NewOrderPage extends React.Component {\n//   // initial state of the app when it first loads\n//   state = {\n//     menuCategories: [],\n//     activeCategory: \"\",\n//     lineItems: [],\n//     menuItems: [],\n//   }\n//   // add to cart button\n//   handleAddToCart = (incoming_item) => {    \n//     let itemAlreadyExistsInCart = this.state.lineItems.some(obj => obj.item.name === incoming_item.name)\n//     if (itemAlreadyExistsInCart) {\n//       // if item already exists in cart, increment quantity in the fanciest way possible: map + ternary operator to replace the object in question.\n//       // YOU DO: replace with a simple, readable, debuggable for loop.\n//       this.setState({lineItems: this.state.lineItems.map(obj => obj.item.name === incoming_item.name ? {...obj,qty:obj.qty+1} : obj)})\n//     } else {\n//       // if item doesn't exist in cart, copy over existing cart + stick incoming_item in\n//       this.setState({lineItems: [...this.state.lineItems,{qty:1,item:incoming_item}]})\n//     }\n//   }\n//   // send cart to server\n//   handleCheckout = async () => {\n//     try {\n//       let jwt = localStorage.getItem('token')\n//       let fetchResponse = await fetch(\"/api/orders\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           'Authorization': 'Bearer ' + jwt\n//         },\n//         body: JSON.stringify({lineItems: this.state.lineItems}) // <-- send this object to server\n//         }) \n//       let serverResponse = await fetchResponse.json() // <-- decode fetch response\n//       console.log(\"Success:\", serverResponse)   // <-- log server response\n//       this.setState({lineItems: []}) // if order sent without errors, set state to empty\n//     } catch (err) {\n//       console.error(\"Error:\", err) // <-- log if error \n//     }\n//   }\n//   // lifecycle method that runs once. fetch the menu from the DB.\n//   async componentDidMount() {\n//     try {\n//       let fetchItemsResponse = await fetch('/api/items') // <-- get data from server (Stream object)\n//       let fetchCatsResponse = await fetch('/api/categories')\n//       let items = await fetchItemsResponse.json(); // <------- convert fetch response into a js object/array\n//       let catsObjects = await fetchCatsResponse.json();\n//       let catsStrings = catsObjects.map(c => c.name) // convert [{\"id\":\"0\", name:\"sandwiches\"},{..] => [\"sandwiches\",..]\n//       this.setState({ menuItems: items, menuCategories: catsStrings})\n//     } catch (err) {\n//       console.error('ERROR:', err) // <-- log if error\n//     }\n//   }\n//   render() {\n//     return (\n//       <main className=\"NewOrderPage\">\n//         <nav className=\"nav\">\n//           <Logo />\n//           <CategoryList menuCategories={this.state.menuCategories} />\n//           <Link to=\"/orders\" className=\"button btn-sm\">PREVIOUS ORDERS</Link>\n//           <UserLogOut />\n//         </nav>\n//         <MenuList menuItems={this.state.menuItems} handleAddToCart={this.handleAddToCart} />\n//         <OrderDetail handleCheckout={this.handleCheckout} lineItems={this.state.lineItems} />\n//       </main>\n//     );\n//   }\n// }\n// export default NewOrderPage;","map":{"version":3,"sources":["/home/ericmbc/GA/resumates/MERN_ResumePeeker/resumates/src/pages/NewOrderPage/NewOrderPage.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// // import \"./NewOrderPage.css\"\n// import React from 'react'\n// import { Link } from 'react-router-dom';\n// // import MenuList from '../../components/MenuList/MenuList';\n// // import OrderDetail from '../../components/OrderDetail/OrderDetail';\n// // import Logo from '../../components/Logo/Logo';\n// // import CategoryList from '../../components/CategoryList/CategoryList';\n// // import UserLogOut from '../../components/UserLogOut/UserLogOut';\n\n// class NewOrderPage extends React.Component {\n\n//   // initial state of the app when it first loads\n//   state = {\n//     menuCategories: [],\n//     activeCategory: \"\",\n//     lineItems: [],\n//     menuItems: [],\n//   }\n\n//   // add to cart button\n//   handleAddToCart = (incoming_item) => {    \n//     let itemAlreadyExistsInCart = this.state.lineItems.some(obj => obj.item.name === incoming_item.name)\n//     if (itemAlreadyExistsInCart) {\n//       // if item already exists in cart, increment quantity in the fanciest way possible: map + ternary operator to replace the object in question.\n//       // YOU DO: replace with a simple, readable, debuggable for loop.\n//       this.setState({lineItems: this.state.lineItems.map(obj => obj.item.name === incoming_item.name ? {...obj,qty:obj.qty+1} : obj)})\n//     } else {\n//       // if item doesn't exist in cart, copy over existing cart + stick incoming_item in\n//       this.setState({lineItems: [...this.state.lineItems,{qty:1,item:incoming_item}]})\n//     }\n//   }\n\n//   // send cart to server\n//   handleCheckout = async () => {\n//     try {\n\n//       let jwt = localStorage.getItem('token')\n\n\n//       let fetchResponse = await fetch(\"/api/orders\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           'Authorization': 'Bearer ' + jwt\n//         },\n//         body: JSON.stringify({lineItems: this.state.lineItems}) // <-- send this object to server\n//         }) \n//       let serverResponse = await fetchResponse.json() // <-- decode fetch response\n//       console.log(\"Success:\", serverResponse)   // <-- log server response\n\n//       this.setState({lineItems: []}) // if order sent without errors, set state to empty\n//     } catch (err) {\n//       console.error(\"Error:\", err) // <-- log if error \n//     }\n//   }\n\n//   // lifecycle method that runs once. fetch the menu from the DB.\n//   async componentDidMount() {\n//     try {\n//       let fetchItemsResponse = await fetch('/api/items') // <-- get data from server (Stream object)\n//       let fetchCatsResponse = await fetch('/api/categories')\n//       let items = await fetchItemsResponse.json(); // <------- convert fetch response into a js object/array\n//       let catsObjects = await fetchCatsResponse.json();\n//       let catsStrings = catsObjects.map(c => c.name) // convert [{\"id\":\"0\", name:\"sandwiches\"},{..] => [\"sandwiches\",..]\n//       this.setState({ menuItems: items, menuCategories: catsStrings})\n//     } catch (err) {\n//       console.error('ERROR:', err) // <-- log if error\n//     }\n//   }\n  \n//   render() {\n//     return (\n//       <main className=\"NewOrderPage\">\n//         <nav className=\"nav\">\n//           <Logo />\n//           <CategoryList menuCategories={this.state.menuCategories} />\n//           <Link to=\"/orders\" className=\"button btn-sm\">PREVIOUS ORDERS</Link>\n//           <UserLogOut />\n//         </nav>\n//         <MenuList menuItems={this.state.menuItems} handleAddToCart={this.handleAddToCart} />\n//         <OrderDetail handleCheckout={this.handleCheckout} lineItems={this.state.lineItems} />\n//       </main>\n//     );\n//   }\n// }\n\n// export default NewOrderPage;"]},"metadata":{},"sourceType":"module"}